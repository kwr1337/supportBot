"""
–°–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á —Å –ë–∏—Ç—Ä–∏–∫—Å24 (–±–µ–∑ webhook)
"""
import asyncio
import logging
from typing import List, Dict, Any
from datetime import datetime, timedelta

from models import Task, TaskStatus
from database import get_db_session
from bitrix24_api import bitrix24_api
from task_service import TaskService

logger = logging.getLogger(__name__)


class StatusSyncService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á —Å –ë–∏—Ç—Ä–∏–∫—Å24"""
    
    def __init__(self):
        self.task_service = TaskService()
        self.telegram_app = None
    
    def set_telegram_app(self, app):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.telegram_app = app
    
    async def sync_all_active_tasks(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á —Å –ë–∏—Ç—Ä–∏–∫—Å24"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å Bitrix24 ID, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            db = get_db_session()
            try:
                active_tasks = db.query(Task).filter(
                    Task.bitrix24_task_id.isnot(None),
                    Task.status.in_([TaskStatus.NEW.value, TaskStatus.IN_PROGRESS.value])
                ).all()
                
                logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º {len(active_tasks)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")
                
                for task in active_tasks:
                    await self.sync_single_task(task)
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.5)
                    
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á: {e}")
    
    async def sync_single_task(self, task: Task):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
            bitrix_task = bitrix24_api.get_task(task.bitrix24_task_id)
            
            if not bitrix_task:
                logger.warning(f"–ó–∞–¥–∞—á–∞ {task.bitrix24_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 - –≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º —á–∞—Ç
                await self.handle_deleted_task(task)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
            bitrix_status = bitrix_task.get("status")
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ –ë–∏—Ç—Ä–∏–∫—Å24 –Ω–∞ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
            status_map = {
                "1": TaskStatus.NEW,        # –ù–æ–≤–∞—è
                "2": TaskStatus.NEW,        # –ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è  
                "3": TaskStatus.IN_PROGRESS, # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
                "4": TaskStatus.CANCELLED,   # –û—Ç–ª–æ–∂–µ–Ω–∞
                "5": TaskStatus.COMPLETED,   # –ó–∞–≤–µ—Ä—à–µ–Ω–∞
                "6": TaskStatus.COMPLETED,   # –ó–∞–∫—Ä—ã—Ç–∞
                "7": TaskStatus.CANCELLED,   # –û—Ç–∫–ª–æ–Ω–µ–Ω–∞
            }
            
            mapped_status = status_map.get(bitrix_status)
            if not mapped_status:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ë–∏—Ç—Ä–∏–∫—Å24: {bitrix_status}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å
            if task.status != mapped_status.value:
                old_status = task.status
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—à–µ–π –ë–î
                self.task_service.update_task_status(task.id, mapped_status)
                
                logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ #{task.id}: {old_status} ‚Üí {mapped_status.value}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.send_sync_notification(task, old_status, mapped_status.value)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
                await self.send_chat_sync_notification(task, old_status, mapped_status.value)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ #{task.id}: {e}")
    
    async def send_sync_notification(self, task: Task, old_status: str, new_status: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        if not self.telegram_app:
            logger.warning("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        status_names = {
            "new": "üÜï –ù–æ–≤–∞—è",
            "in_progress": "‚è≥ –í —Ä–∞–±–æ—Ç–µ",
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        }
        
        message = f"""
üîÑ **–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24**

üìù **–ó–∞–¥–∞—á–∞ #{task.id}:** {task.title}
üìä **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:** {status_names.get(old_status, old_status)} ‚Üí {status_names.get(new_status, new_status)}
üîó **Bitrix24 ID:** {task.bitrix24_task_id}
‚è∞ **–í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—ã–ª–æ –≤–Ω–µ—Å–µ–Ω–æ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –±–æ—Ç–æ–º.
        """
        
        try:
            await self.telegram_app.bot.send_message(
                chat_id=int(task.telegram_user_id),
                text=message,
                parse_mode="Markdown"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task.telegram_user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def send_chat_sync_notification(self, task: Task, old_status: str, new_status: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24"""
        if not self.telegram_app:
            logger.warning("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Ç")
            return
        
        status_names = {
            "new": "üÜï –ù–æ–≤–∞—è",
            "in_progress": "‚è≥ –í —Ä–∞–±–æ—Ç–µ",
            "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
            "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if new_status == "completed":
            icon = "üéâ"
            action_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24"
            additional_info = "\nüèÜ **–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã.**"
        elif new_status == "in_progress":
            icon = "üöÄ"
            action_text = "–≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –≤ –ë–∏—Ç—Ä–∏–∫—Å24"
            additional_info = "\n‚ö° **–ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.**"
        elif new_status == "cancelled":
            icon = "‚ùå"
            action_text = "–æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24"
            additional_info = "\nüí≠ **–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.**"
        else:
            icon = "üîÑ"
            action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24"
            additional_info = ""
        
        message = f"""
{icon} **–ó–∞–¥–∞—á–∞ {action_text}!**

üìù **–ó–∞–¥–∞—á–∞ #{task.id}:** {task.title[:100]}
üìä **–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω:** {status_names.get(old_status, old_status)} ‚Üí {status_names.get(new_status, new_status)}
üîó **Bitrix24 ID:** {task.bitrix24_task_id}
‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}{additional_info}

üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—ã–ª–æ –≤–Ω–µ—Å–µ–Ω–æ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.*
        """
        
        try:
            await self.telegram_app.bot.send_message(
                chat_id=int(task.telegram_chat_id),
                text=message,
                parse_mode="Markdown",
                reply_to_message_id=task.telegram_message_id
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —á–∞—Ç {task.telegram_chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —á–∞—Ç: {e}")
    
    async def start_periodic_sync(self, interval_minutes: int = 5):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç")
        
        while True:
            try:
                await self.sync_all_active_tasks()
                await asyncio.sleep(interval_minutes * 60)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(60)  # –ü–∞—É–∑–∞ 1 –º–∏–Ω—É—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def handle_deleted_task(self, task: Task):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24"""
        try:
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—É—é –≤ –Ω–∞—à–µ–π –ë–î
            db = get_db_session()
            try:
                task.status = TaskStatus.CANCELLED.value
                db.commit()
                
                logger.info(f"–ó–∞–¥–∞—á–∞ #{task.id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω–∞—è (—É–¥–∞–ª–µ–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24)")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
                await self.send_deletion_notification_to_chat(task)
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {e}")
    
    async def send_deletion_notification_to_chat(self, task: Task):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç"""
        if not self.telegram_app:
            logger.warning("Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return
        
        try:
            notification_message = f"""
üóëÔ∏è **–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24**

üìù **–ó–∞–¥–∞—á–∞ #{task.id}:** {task.title[:100]}
‚ùå **–°—Ç–∞—Ç—É—Å:** –û—Ç–º–µ–Ω–µ–Ω–∞ (—É–¥–∞–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ)
üîó **Bitrix24 ID:** {task.bitrix24_task_id}
‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí≠ **–ó–∞–¥–∞—á–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –±–æ—Ç–µ.**
            """
            
            await self.telegram_app.bot.send_message(
                chat_id=int(task.telegram_chat_id),
                text=notification_message,
                parse_mode="Markdown",
                reply_to_message_id=task.telegram_message_id
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #{task.id} –≤ —á–∞—Ç {task.telegram_chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –≤ —á–∞—Ç: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
status_sync_service = StatusSyncService()
