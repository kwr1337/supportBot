"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 REST API
"""
import requests
import json
from typing import Dict, Any, Optional, List
from config import settings
from models import TaskType, TaskStatus
import logging

logger = logging.getLogger(__name__)


class Bitrix24API:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Bitrix24 REST API"""
    
    def __init__(self):
        self.domain = settings.bitrix24_domain
        self.access_token = settings.bitrix24_access_token
        # –î–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π URL
        if hasattr(settings, 'bitrix24_user_id'):
            self.base_url = f"https://{self.domain}/rest/{settings.bitrix24_user_id}/{self.access_token}/"
        else:
            self.base_url = f"https://{self.domain}/rest/"
    
    def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24 API"""
        url = f"{self.base_url}{endpoint}"
        
        # –î–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ —Ç–æ–∫–µ–Ω —É–∂–µ –≤ URL, –Ω–µ –Ω—É–∂–µ–Ω –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
        params = data.copy() if data else {}
        
        # –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º auth –µ—Å–ª–∏ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –≤–µ–±—Ö—É–∫
        if not (hasattr(settings, 'bitrix24_user_id') and settings.bitrix24_user_id):
            params["auth"] = self.access_token
        
        try:
            logger.info(f"üîç Bitrix24 –∑–∞–ø—Ä–æ—Å: {method} {url}")
            logger.info(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
            
            if method.upper() == "GET":
                response = requests.get(url, params=params)
            else:
                response = requests.post(url, data=params)
            
            logger.info(f"üîç –û—Ç–≤–µ—Ç —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            logger.info(f"üîç –û—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç: {response.text[:500]}...")
            
            response.raise_for_status()
            result = response.json()
            
            if "error" in result:
                logger.error(f"–û—à–∏–±–∫–∞ Bitrix24 API: {result['error']}")
                raise Exception(f"Bitrix24 API Error: {result['error']}")
            
            return result.get("result", {})
            
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitrix24: {e}")
            raise
        except json.JSONDecodeError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞ Bitrix24: {e}")
            raise
    
    def create_task(self, title: str, description: str, task_type: TaskType, 
                   responsible_user_id: Optional[int] = None, co_executors: Optional[List[int]] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Bitrix24"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á–∏
        priority = "2"  # –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        if task_type == TaskType.BUG:
            priority = "3"  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –±–∞–≥–æ–≤
        elif task_type == TaskType.REQUIREMENT:
            priority = "1"  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        elif task_type == TaskType.CONSULTATION:
            priority = "2"  # –û–±—ã—á–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        
        # –õ–æ–≥–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:
        # CREATED_BY (–ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫) - –≤—Å–µ–≥–¥–∞ –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç (1269)
        # RESPONSIBLE_ID (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å) - –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ –∏–ª–∏ –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        creator_id = 1269  # –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç –≤—Å–µ–≥–¥–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫
        responsible_id = responsible_user_id or 1269  # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É –∏–ª–∏ –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç
        
        task_data = {
            "fields[TITLE]": title,
            "fields[DESCRIPTION]": description,
            "fields[PRIORITY]": priority,
            "fields[CREATED_BY]": creator_id,
            "fields[RESPONSIBLE_ID]": responsible_id,
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        if co_executors:
            for i, co_executor_id in enumerate(co_executors):
                task_data[f"fields[ACCOMPLICES][{i}]"] = co_executor_id
        
        result = self._make_request("POST", "tasks.task.add", task_data)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ Bitrix24 —Å ID: {result.get('task', {}).get('id')}")
        
        return result
    
    def update_task_status(self, task_id: int, status: TaskStatus) -> Dict[str, Any]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ –≤ Bitrix24"""
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞—à–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã Bitrix24
        bitrix_status_map = {
            TaskStatus.NEW: "2",  # –ñ–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            TaskStatus.IN_PROGRESS: "3",  # –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            TaskStatus.COMPLETED: "5",  # –ó–∞–≤–µ—Ä—à–µ–Ω–∞
            TaskStatus.CANCELLED: "4"  # –û—Ç–ª–æ–∂–µ–Ω–∞
        }
        
        update_data = {
            "taskId": task_id,
            "fields[STATUS]": bitrix_status_map.get(status, "2")
        }
        
        result = self._make_request("POST", "tasks.task.update", update_data)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} –Ω–∞ {status.value}")
        
        return result
    
    def get_task(self, task_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ"""
        try:
            data = {
                "taskId": task_id
            }
            
            result = self._make_request("GET", "tasks.task.get", data)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ (–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
            if isinstance(result, list) and len(result) == 0:
                return None
            elif isinstance(result, dict):
                return result.get("task", {})
            else:
                return result
            
        except Exception as e:
            error_text = str(e).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–º —É–¥–∞–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
            if any(keyword in error_text for keyword in [
                "task not found", 
                "–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                "access denied",
                "404",
                "not found"
            ]):
                logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 (–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–µ–Ω–∞)")
                return None
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")
                raise
    
    def add_comment_to_task(self, task_id: int, comment: str) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–¥–∞—á–µ"""
        comment_data = {
            "taskId": task_id,
            "fields[POST_MESSAGE]": comment
        }
        
        result = self._make_request("POST", "tasks.task.commentitem.add", comment_data)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ {task_id}")
        
        return result
    
    def attach_telegram_file_to_task(self, task_id: int, file_info: Dict[str, Any], telegram_file_url: str) -> Dict[str, Any]:
        """–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –∏–∑ Telegram –∫ –∑–∞–¥–∞—á–µ –∫–∞–∫ —Å—Å—ã–ª–∫–∞"""
        try:
            filename = file_info.get("filename", "unknown_file")
            file_size = file_info.get("size", 0)
            file_type = file_info.get("type", "file")
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            type_emoji = {
                "photo": "üñºÔ∏è",
                "document": "üìÑ", 
                "video": "üé•",
                "audio": "üéµ",
                "voice": "üé§"
            }
            
            emoji = type_emoji.get(file_type, "üìé")
            size_text = f"{round(file_size / (1024 * 1024), 2)} MB" if file_size > 1024*1024 else f"{round(file_size / 1024, 2)} KB"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ñ–∞–π–ª–æ–º –∫–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ
            comment = f"""
{emoji} **–ü–†–ò–ö–†–ï–ü–õ–ï–ù–ù–´–ô –§–ê–ô–õ**

üìã **–ù–∞–∑–≤–∞–Ω–∏–µ:** {filename}
üìä **–†–∞–∑–º–µ—Ä:** {size_text}
üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:** {telegram_file_url}

üí° *–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–µ –∏–∑ Telegram. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.*
            """.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ
            result = self.add_comment_to_task(task_id, comment)
            
            logger.info(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ {filename} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –∑–∞–¥–∞—á–µ {task_id} –∫–∞–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ")
            
            return {"success": True, "method": "telegram_link", "filename": filename}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫ –∑–∞–¥–∞—á–µ: {e}")
            return {"success": False, "error": str(e)}
    
    def _upload_via_disk(self, task_id: int, file_path: str, filename: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –¥–∏—Å–∫ –ë–∏—Ç—Ä–∏–∫—Å24"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            storage_url = f"https://{self.domain}/rest/{settings.bitrix24_user_id}/{self.access_token}/disk.storage.getlist"
            
            storage_response = requests.get(storage_url)
            
            if storage_response.status_code == 200:
                storage_result = storage_response.json()
                
                if "result" in storage_result and storage_result["result"]:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    storage = storage_result["result"][0]
                    storage_id = storage["ID"]
                    
                    logger.info(f"üìÇ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {storage.get('NAME', 'Unknown')} (ID: {storage_id})")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    upload_url = f"https://{self.domain}/rest/{settings.bitrix24_user_id}/{self.access_token}/disk.storage.uploadfile"
                    
                    with open(file_path, 'rb') as file_content:
                        files = {
                            'fileContent': (filename, file_content, self._get_mime_type(filename))
                        }
                        
                        data = {
                            'id': storage_id,
                            'data[NAME]': filename
                        }
                        
                        upload_response = requests.post(upload_url, data=data, files=files)
                        
                        logger.info(f"üîç –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –¥–∏—Å–∫: {upload_response.status_code}")
                        
                        if upload_response.status_code == 200:
                            upload_result = upload_response.json()
                            
                            if "result" in upload_result:
                                file_data = upload_result["result"]
                                file_id = file_data.get("ID")
                                download_url = file_data.get("DOWNLOAD_URL", "")
                                
                                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
                                comment = f"""
üìé **–§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω:** {filename}
üíæ **–†–∞–∑–º–µ—Ä:** {round(os.path.getsize(file_path) / 1024, 2)} KB
üîó **–°–∫–∞—á–∞—Ç—å:** {download_url}
üìã **ID —Ñ–∞–π–ª–∞:** {file_id}

*–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Telegram –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å24*
                                """.strip()
                                
                                self.add_comment_to_task(task_id, comment)
                                
                                logger.info(f"‚úÖ –§–∞–π–ª {filename} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –¥–∏—Å–∫ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∑–∞–¥–∞—á–µ")
                                return {"success": True, "method": "disk_upload", "file_id": file_id}
            
            # –ï—Å–ª–∏ –≤—Å–µ —Å–ø–æ—Å–æ–±—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            self._add_file_info_fallback(task_id, file_path, filename)
            return {"success": False, "method": "info_only"}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –¥–∏—Å–∫: {e}")
            self._add_file_info_fallback(task_id, file_path, filename)
            return {"success": False, "error": str(e)}
    
    def _add_file_info_fallback(self, task_id: int, file_path: str, filename: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"""
        try:
            file_size_mb = round(os.path.getsize(file_path) / (1024 * 1024), 2)
            
            comment = f"""
üìé **–§–∞–π–ª –∏–∑ Telegram:** {filename}
üìä **–†–∞–∑–º–µ—Ä:** {file_size_mb} MB
üíæ **–°—Ç–∞—Ç—É—Å:** –°–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±–æ—Ç–∞

‚ùó *–§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.*
            """.strip()
            
            self.add_comment_to_task(task_id, comment)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ {filename} –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {e}")
    
    async def _upload_file_alternative(self, task_id: int, file_path: str, filename: str) -> Dict[str, Any]:
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ –¥–∏—Å–∫ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        try:
            # –°–ø–æ—Å–æ–± 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –¥–∏—Å–∫ –ë–∏—Ç—Ä–∏–∫—Å24
            disk_url = f"https://{self.domain}/rest/{settings.bitrix24_user_id}/{self.access_token}/disk.storage.uploadfile"
            
            with open(file_path, 'rb') as file_content:
                files = {
                    'fileContent': (filename, file_content, self._get_mime_type(filename))
                }
                
                data = {
                    'id': 1,  # ID —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞)
                    'data[NAME]': filename
                }
                
                response = requests.post(disk_url, data=data, files=files)
                
                if response.status_code == 200:
                    result = response.json()
                    
                    if "result" in result:
                        file_id = result["result"]["ID"]
                        download_url = result["result"]["DOWNLOAD_URL"]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ñ–∞–π–ª
                        comment = f"""
üìé **–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª:** {filename}
üîó **–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:** {download_url}
üìä **–†–∞–∑–º–µ—Ä:** {round(os.path.getsize(file_path) / 1024, 2)} KB
                        """.strip()
                        
                        self.add_comment_to_task(task_id, comment)
                        
                        logger.info(f"‚úÖ –§–∞–π–ª {filename} –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –¥–∏—Å–∫ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∑–∞–¥–∞—á–µ")
                        return {"success": True, "filename": filename, "file_id": file_id}
            
            # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_size_mb = round(os.path.getsize(file_path) / (1024 * 1024), 2)
            comment = f"""
üìé **–§–∞–π–ª –∏–∑ Telegram:** {filename}
üìä **–†–∞–∑–º–µ—Ä:** {file_size_mb} MB
üíæ **–°–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –±–æ—Ç–∞**

‚ùó *–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞*
            """.strip()
            
            self.add_comment_to_task(task_id, comment)
            
            return {"success": False, "filename": filename, "local_only": True}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return {"success": False, "filename": filename, "error": str(e)}
    
    def _get_mime_type(self, filename: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ MIME —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é"""
        extension = filename.lower().split('.')[-1] if '.' in filename else ''
        
        mime_types = {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg', 
            'png': 'image/png',
            'gif': 'image/gif',
            'pdf': 'application/pdf',
            'doc': 'application/msword',
            'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'xls': 'application/vnd.ms-excel',
            'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'txt': 'text/plain',
            'mp4': 'video/mp4',
            'mp3': 'audio/mpeg',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav'
        }
        
        return mime_types.get(extension, 'application/octet-stream')
    
    def get_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            result = self._make_request("GET", "user.get")
            
            if isinstance(result, list):
                return result
            elif isinstance(result, dict) and "result" in result:
                return result["result"]
            else:
                return []
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_active_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö
            all_users = self.get_users()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            active_users = [
                user for user in all_users 
                if user.get("ACTIVE") == "Y" or user.get("ACTIVE") == True
            ]
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {len(all_users)}")
            return active_users
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def search_user_by_name(self, search_term: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏"""
        try:
            data = {
                "filter": {
                    "NAME": f"%{search_term}%",
                    "ACTIVE": "Y"
                }
            }
            
            result = self._make_request("GET", "user.get", data)
            
            if isinstance(result, list):
                return result
            elif isinstance(result, dict) and "result" in result:
                return result["result"]
            else:
                return []
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def get_user_by_telegram_id(self, telegram_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID –≤ –ø–æ–ª–µ tgID"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—â–µ–º —Å—Ä–µ–¥–∏ –Ω–∏—Ö
            all_users = self.get_users()
            
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è Telegram ID
            possible_fields = ["UF_TELEGRAM_ID", "UF_TG_ID", "UF_TGID", "tgID", "UF_USR_1755866403098"]
            
            for user in all_users:
                for field in possible_fields:
                    field_value = user.get(field, "")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                    if str(field_value).strip() == str(telegram_id).strip():
                        logger.info(f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –ø–æ–ª—é {field}: {user.get('NAME')} {user.get('LAST_NAME')} (ID: {user.get('ID')})")
                        return user
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID: {e}")
            return None
    
    def update_user_telegram_id(self, user_id: int, telegram_id: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è tgID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–∏—Ç—Ä–∏–∫—Å24"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è –¥–ª—è Telegram ID
            fields_to_try = ["UF_TELEGRAM_ID", "UF_TG_ID", "UF_TGID"]
            
            for field in fields_to_try:
                try:
                    data = {
                        "ID": user_id,
                        f"fields[{field}]": telegram_id
                    }
                    
                    result = self._make_request("POST", "user.update", data)
                    
                    if result:
                        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω Telegram ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {telegram_id} (–ø–æ–ª–µ: {field})")
                        return True
                        
                except Exception as field_error:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ {field}: {field_error}")
                    continue
            
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø–æ–ª–µ –¥–ª—è Telegram ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False
    
    def get_users_with_telegram_ids(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–ª–µ tgID"""
        try:
            all_users = self.get_users()
            users_with_tg = []
            
            # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è Telegram ID
            possible_fields = ["UF_TELEGRAM_ID", "UF_TG_ID", "UF_TGID", "tgID", "UF_USR_1755866403098"]
            
            for user in all_users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è Telegram ID
                telegram_id = None
                used_field = None
                
                for field in possible_fields:
                    if field in user and user[field] and str(user[field]).strip():
                        telegram_id = str(user[field]).strip()
                        used_field = field
                        break
                
                if telegram_id:
                    user["TELEGRAM_ID"] = telegram_id  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–ª–µ
                    user["TELEGRAM_FIELD"] = used_field  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å
                    users_with_tg.append(user)
                    logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.get('NAME')} {user.get('LAST_NAME')} –∏–º–µ–µ—Ç Telegram ID {telegram_id} –≤ –ø–æ–ª–µ {used_field}")
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users_with_tg)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID")
            return users_with_tg
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID: {e}")
            return []
    
    def find_bitrix_user_by_telegram(self, telegram_id: str) -> Optional[int]:
        """–ü–æ–∏—Å–∫ Bitrix24 ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID"""
        user = self.get_user_by_telegram_id(telegram_id)
        if user:
            return int(user.get("ID", 0))
        return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
bitrix24_api = Bitrix24API()
