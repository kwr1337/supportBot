"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24
"""
import json
import logging
from typing import Optional, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Message, File
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from telegram.constants import ParseMode
import os
import requests
from datetime import datetime

from config import settings
from models import Task, TaskType, TaskStatus, TaskCreateRequest, UserSession
from database import get_db_session
from bitrix24_api import bitrix24_api
from task_service import TaskService
from status_sync_service import status_sync_service
from user_management_service import user_management
from auth_decorators import admin_only, client_or_admin, log_user_action
from models import UserRole
from project_service import project_service
from employee_service import employee_service
from telegram_bitrix_sync_service import telegram_bitrix_sync

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, settings.log_level.upper())
)
logger = logging.getLogger(__name__)


class SupportBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    
    # ID –ï–ª–µ–Ω—ã –ó—É–±–∞—Ç–µ–Ω–∫–æ - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞ —Å–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
    ELENA_ZUBATENKO_ID = 809
    
    def __init__(self):
        self.task_service = TaskService()

        self.bot_username = None
    
    @client_or_admin
    @log_user_action("start")
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = str(update.effective_user.id)
        telegram_user = update.effective_user
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = user_management.get_user_role(user_id)
        is_admin = user_role == UserRole.ADMIN
        
        welcome_message = f"""
ü§ñ **–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤**

–ü—Ä–∏–≤–µ—Ç, {telegram_user.first_name}! –í–∞—à Telegram ID: `{user_id}`

üéØ **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1\\. –£–ø–æ–º—è–Ω–∏—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º \\(@{self.bot_username or "supportbot"}\\) –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
2\\. –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ –ë–∏—Ç—Ä–∏–∫—Å24
3\\. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã

üì± **–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` \\- –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `/help` \\- –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é  
‚Ä¢ `/tasks` \\- –ú–æ–∏ –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ `/my_role` \\- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏
        """
        
        if is_admin:
            welcome_message += """

üëë **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
‚Ä¢ `/users` \\- –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ `/add_admin` \\- –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/remove_admin` \\- –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ `/manage_employees` \\- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ \\(—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞\\)
‚Ä¢ `/sync` \\- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–∏—Ç—Ä–∏–∫—Å24

üì± **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º Telegram\\-–ë–∏—Ç—Ä–∏–∫—Å24:**
‚Ä¢ `/show_links` \\- –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–≤—è–∑–∏
‚Ä¢ `/link_telegram` \\- –°–≤—è–∑–∞—Ç—å Bitrix24 ID —Å Telegram ID
‚Ä¢ `/unlink_telegram` \\- –£–¥–∞–ª–∏—Ç—å —Å–≤—è–∑—å
‚Ä¢ `/sync_bitrix` \\- –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ —Å –ë–∏—Ç—Ä–∏–∫—Å24
‚Ä¢ `/daily_report` \\- –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
            """
        
        welcome_message += """

üéØ **–¢–∏–ø—ã –∑–∞–¥–∞—á:**
üêõ –ë–∞–≥ \\- –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã
üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ \\- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å  
üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è \\- –í–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        """
        
        await update.message.reply_text(
            welcome_message,
            parse_mode=ParseMode.MARKDOWN
        )
    
    @client_or_admin
    @log_user_action("help")
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = """
üìñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**
1. –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É
2. –£–ø–æ–º—è–Ω–∏—Ç–µ –±–æ—Ç–∞ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è (@{bot_username})
3. –ë–æ—Ç —Å–æ–∑–¥–∞—Å—Ç –∑–∞–¥–∞—á—É –∏ –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º –≤ –ª–∏—á–∫—É –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç–∏–ø–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏:**
‚Ä¢ `/tasks` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ `/task_status <ID> <—Å—Ç–∞—Ç—É—Å>` - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
‚Ä¢ `/stats` - –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
‚Ä¢ `/analytics [–¥–Ω–∏]` - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
‚Ä¢ `/my_stats` - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ `/daily_report [YYYY-MM-DD]` - –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
‚Ä¢ `/sync` - –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–∏—Ç—Ä–∏–∫—Å24

**–°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á:**
‚Ä¢ `new` - –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞
‚Ä¢ `in_progress` - –í —Ä–∞–±–æ—Ç–µ  
‚Ä¢ `completed` - –ó–∞–≤–µ—Ä—à–µ–Ω–∞
‚Ä¢ `cancelled` - –û—Ç–º–µ–Ω–µ–Ω–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `/task_status 123 in_progress` - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É
‚Ä¢ `/task_status 123 completed` - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
        """.format(bot_username=self.bot_username or "supportbot")
        
        await update.message.reply_text(
            help_message,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_mention(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        message = update.message
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.type}: {message.text or '–ú–µ–¥–∏–∞ —Ñ–∞–π–ª'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –∏ –±–æ—Ç —É–ø–æ–º—è–Ω—É—Ç
        if message.chat.type in ['group', 'supergroup']:
            bot_username = context.bot.username
            logger.info(f"–ò–º—è –±–æ—Ç–∞: @{bot_username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ caption
            text_to_check = message.text or message.caption or ""
            logger.info(f"–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {text_to_check}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
            mentioned = (f"@{bot_username}" in text_to_check or 
                        any(entity.type == 'mention' and text_to_check[entity.offset:entity.offset + entity.length] == f"@{bot_username}" 
                            for entity in (message.entities or message.caption_entities or [])))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
            is_reply_with_bot = False
            reply_original_text = ""
            
            if message.reply_to_message and f"@{bot_username}" in text_to_check:
                is_reply_with_bot = True
                reply_original_text = message.reply_to_message.text or message.reply_to_message.caption or ""
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω reply —Å –±–æ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {reply_original_text[:100]}")
            
            if mentioned or "@" in text_to_check or is_reply_with_bot:  # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ @ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–ë–æ—Ç —É–ø–æ–º—è–Ω—É—Ç! –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É... (username: @{bot_username})")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
                if is_reply_with_bot:
                    # –î–ª—è reply –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                    task_text = f"–ó–∞–¥–∞—á–∞ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é: {reply_original_text[:200]}"
                    if text_to_check.replace(f"@{bot_username}", "").strip():
                        task_text += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {text_to_check.replace(f'@{bot_username}', '').strip()}"
                else:
                    # –û–±—ã—á–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
                    task_text = text_to_check.replace(f"@{bot_username}", "").strip()
                
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –Ω–æ –µ—Å—Ç—å –º–µ–¥–∏–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if not task_text and (message.photo or message.document or message.video or message.audio):
                    task_text = "–ó–∞–¥–∞—á–∞ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏"
                
                if len(task_text) < 5:
                    await message.reply_text(
                        "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ —á–∞—Ç–µ
                extended_description = await self.create_extended_description(message, task_text)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                try:
                    task_request = TaskCreateRequest(
                        title=task_text[:100] + "..." if len(task_text) > 100 else task_text,
                        description=extended_description,
                        telegram_message_id=message.message_id,
                        telegram_chat_id=str(message.chat_id),
                        telegram_user_id=str(message.from_user.id)
                    )
                    
                    task = self.task_service.create_task(task_request)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    await self.save_message_files(message, task.id, context)
                    
                    # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await self.create_bitrix_task_immediately(context, task, message)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                    await message.reply_text(
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
    
    async def send_type_clarification(self, context: ContextTypes.DEFAULT_TYPE, task: Task):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üêõ –ë–∞–≥", callback_data=f"type_{task.id}_bug"),
                InlineKeyboardButton("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ", callback_data=f"type_{task.id}_requirement")
            ],
            [
                InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data=f"type_{task.id}_consultation")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        clarification_message = f"""
üîç **–£—Ç–æ—á–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ #{task.id}**

**–û–ø–∏—Å–∞–Ω–∏–µ:** {task.description[:300]}...

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:

üêõ **–ë–∞–≥** - –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã
üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ** - –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å  
üí¨ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è** - –í–æ–ø—Ä–æ—Å –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è
        """
        
        try:
            await context.bot.send_message(
                chat_id=int(task.telegram_user_id),
                text=clarification_message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.session_service.create_or_update_session(
                telegram_user_id=task.telegram_user_id,
                current_task_id=task.id,
                state="waiting_type_selection"
            )
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {task.telegram_user_id}: {e}")
    
    async def create_bitrix_task_immediately(self, context: ContextTypes.DEFAULT_TYPE, task: Task, original_message):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–¥–∏–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:
            # 1. –ï—Å–ª–∏ —ç—Ç–æ reply –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ -> –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å = —ç—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
            # 2. –ò–Ω–∞—á–µ -> –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å = –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç (ID 1269)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ reply_to_message
            if original_message.reply_to_message:
                # –≠—Ç–æ reply - –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç
                replier_user_id = str(original_message.from_user.id)
                replier_bitrix_id = telegram_bitrix_sync.get_bitrix_user_id(replier_user_id)
                
                if replier_bitrix_id:
                    # Reply –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –Ω–∞–∑–Ω–∞—á–∞–µ–º –µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
                    responsible_id = replier_bitrix_id
                    user_info = telegram_bitrix_sync.get_user_info(replier_user_id)
                    user_name = user_info.get('name', f'ID: {replier_bitrix_id}') if user_info else f'ID: {replier_bitrix_id}'
                    executor_text = f"—Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_name} (ID: {replier_bitrix_id})"
                    logger.info(f"Reply –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (tgID: {replier_user_id}) - –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (ID: {responsible_id})")
                else:
                    # Reply –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ - –Ω–∞–∑–Ω–∞—á–∞–µ–º –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç
                    responsible_id = 1269
                    executor_text = "–¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç"
                    logger.info(f"Reply –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ tgID) - –Ω–∞–∑–Ω–∞—á–∞–µ–º –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç (ID: 1269)")
            else:
                # –û–±—ã—á–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–Ω–µ reply) - –≤—Å–µ–≥–¥–∞ –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç
                responsible_id = 1269
                executor_text = "–¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç"
                logger.info(f"–û–±—ã—á–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –Ω–∞–∑–Ω–∞—á–∞–µ–º –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç (ID: 1269)")
            
            # –ï–ª–µ–Ω–∞ –ó—É–±–∞—Ç–µ–Ω–∫–æ –≤—Å–µ–≥–¥–∞ —Å–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            elena_id = self.ELENA_ZUBATENKO_ID
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ –ë–∏—Ç—Ä–∏–∫—Å24 —Å —Ç–∏–ø–æ–º "–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            bitrix_result = bitrix24_api.create_task(
                title=task.title,
                description=task.description,
                task_type=TaskType.REQUIREMENT,  # –¢–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                responsible_user_id=responsible_id,
                co_executors=[elena_id]  # –ï–ª–µ–Ω–∞ –ó—É–±–∞—Ç–µ–Ω–∫–æ –≤—Å–µ–≥–¥–∞ —Å–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
            bitrix_task_id = None
            if bitrix_result and "task" in bitrix_result:
                bitrix_task_id = bitrix_result["task"]["id"]
                self.task_service.update_bitrix_task_id(task.id, bitrix_task_id)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.task_service.update_task_type(task.id, TaskType.REQUIREMENT)
                
                logger.info(f"–ó–∞–¥–∞—á–∞ #{task.id} —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 —Å ID: {bitrix_task_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            unified_message = f"""
üéØ **–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24!**

üìù **–ó–∞–¥–∞—á–∞ #{task.id}:** {task.title[:100]}
üë§ **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {original_message.from_user.first_name}
üè∑Ô∏è **–¢–∏–ø:** üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
üë®‚Äçüíº **–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** {executor_text}
üë• **–°–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:** –ï–ª–µ–Ω–∞ –ó—É–±–∞—Ç–µ–Ω–∫–æ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤)
üîó **Bitrix24 ID:** {bitrix_task_id or '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è'}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚úÖ **–ó–∞–¥–∞—á–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é!**
            """
            
            await original_message.reply_text(
                unified_message,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
            await original_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24."
            )
    
    async def get_employee_bitrix_id(self, telegram_user_id: str, telegram_chat_id: str = None) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ Bitrix24 ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ Telegram ID —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ tgID
            bitrix_id = telegram_bitrix_sync.get_bitrix_user_id(telegram_user_id)
            
            if bitrix_id:
                logger.debug(f"–ù–∞–π–¥–µ–Ω Bitrix ID {bitrix_id} –¥–ª—è Telegram ID {telegram_user_id}")
                return bitrix_id
            
            # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            db = get_db_session()
            try:
                from models import BotUser
                bot_user = db.query(BotUser).filter(
                    BotUser.telegram_user_id == telegram_user_id
                ).first()
                
                if bot_user and bot_user.bitrix24_user_id:
                    logger.debug(f"–ù–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: Telegram {telegram_user_id} -> Bitrix {bot_user.bitrix24_user_id}")
                    return bot_user.bitrix24_user_id
                
                return None
                
            finally:
                db.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Bitrix24 ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            return None
    
    async def send_task_created_notification(self, context: ContextTypes.DEFAULT_TYPE, task: Task, 
                                           task_type: TaskType, bitrix_task_id: Optional[int]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24"""
        try:
            type_names = {
                TaskType.BUG: "üêõ –ë–∞–≥",
                TaskType.REQUIREMENT: "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ", 
                TaskType.CONSULTATION: "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            }
            
            notification_message = f"""
üéØ **–ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24!**

üìù **–ó–∞–¥–∞—á–∞ #{task.id}** —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
üè∑Ô∏è **–¢–∏–ø:** {type_names[task_type]}
üîó **Bitrix24 ID:** {bitrix_task_id or '–°–æ–∑–¥–∞–µ—Ç—Å—è...'}
‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏ –≥–æ—Ç–æ–≤–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é.
            """
            
            await context.bot.send_message(
                chat_id=int(task.telegram_chat_id),
                text=notification_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_to_message_id=task.telegram_message_id
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #{task.id} –≤ —á–∞—Ç {task.telegram_chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ —á–∞—Ç: {e}")
    
    async def send_status_change_notification(self, context: ContextTypes.DEFAULT_TYPE, 
                                            task: Task, new_status: TaskStatus):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        try:
            status_names = {
                TaskStatus.NEW: "üÜï –ù–æ–≤–∞—è",
                TaskStatus.IN_PROGRESS: "‚è≥ –í —Ä–∞–±–æ—Ç–µ",
                TaskStatus.COMPLETED: "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
                TaskStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if new_status == TaskStatus.COMPLETED:
                icon = "üéâ"
                action_text = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                additional_info = "\nüèÜ **–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.**"
            elif new_status == TaskStatus.IN_PROGRESS:
                icon = "üöÄ"
                action_text = "–≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É"
                additional_info = "\n‚ö° **–ó–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.**"
            elif new_status == TaskStatus.CANCELLED:
                icon = "‚ùå"
                action_text = "–æ—Ç–º–µ–Ω–µ–Ω–∞"
                additional_info = "\nüí≠ **–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞.**"
            else:
                icon = "üîÑ"
                action_text = "–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                additional_info = ""
            
            notification_message = f"""
{icon} **–ó–∞–¥–∞—á–∞ {action_text}!**

üìù **–ó–∞–¥–∞—á–∞ #{task.id}:** {task.title[:100]}
üìä **–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** {status_names[new_status]}
üîó **Bitrix24 ID:** {task.bitrix24_task_id or 'N/A'}
‚è∞ **–û–±–Ω–æ–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}{additional_info}
            """
            
            await context.bot.send_message(
                chat_id=int(task.telegram_chat_id),
                text=notification_message,
                parse_mode=ParseMode.MARKDOWN,
                reply_to_message_id=task.telegram_message_id
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ #{task.id} –≤ —á–∞—Ç {task.telegram_chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∞—Ç: {e}")
    
    async def handle_type_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        query = update.callback_query
        await query.answer()
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
        data_parts = query.data.split("_")
        if len(data_parts) != 3 or data_parts[0] != "type":
            return
        
        task_id = int(data_parts[1])
        task_type = TaskType(data_parts[2])
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            task = self.task_service.update_task_type(task_id, task_type)
            
            if task:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Bitrix24 —Å –ï–ª–µ–Ω–æ–π –∫–∞–∫ —Å–æ–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
                elena_id = self.ELENA_ZUBATENKO_ID
                bitrix_result = bitrix24_api.create_task(
                    title=task.title,
                    description=task.description,
                    task_type=task_type,
                    co_executors=[elena_id]
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ Bitrix24
                if bitrix_result and "task" in bitrix_result:
                    bitrix_task_id = bitrix_result["task"]["id"]
                    self.task_service.update_bitrix_task_id(task_id, bitrix_task_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                type_names = {
                    TaskType.BUG: "üêõ –ë–∞–≥",
                    TaskType.REQUIREMENT: "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ", 
                    TaskType.CONSULTATION: "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
                }
                
                confirmation_message = f"""
‚úÖ **–¢–∏–ø –∑–∞–¥–∞—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**

üìù **–ó–∞–¥–∞—á–∞ #{task.id}**
üè∑Ô∏è **–¢–∏–ø:** {type_names[task_type]}
üîó **Bitrix24 ID:** {bitrix_task_id if 'bitrix_task_id' in locals() else '–°–æ–∑–¥–∞–µ—Ç—Å—è...'}

–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É.
                """
                
                await query.edit_message_text(
                    confirmation_message,
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
                await self.send_task_created_notification(context, task, task_type, bitrix_task_id if 'bitrix_task_id' in locals() else None)
                
                # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.session_service.clear_session(str(query.from_user.id))
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    @client_or_admin
    @log_user_action("tasks")
    async def tasks_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞"""
        user_id = str(update.effective_user.id)
        logger.info(f"üîç –ö–æ–º–∞–Ω–¥–∞ /tasks –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_role = user_management.get_user_role(user_id)
            is_admin = user_role == UserRole.ADMIN
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            projects = project_service.get_user_projects(user_id, is_admin)
            
            if not projects:
                await update.message.reply_text(
                    "üìÇ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É, —É–ø–æ–º—è–Ω—É–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            keyboard = []
            
            for project in projects:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                project_name = project['chat_name'][:25]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                
                button_text = f"üìÅ {project_name} ({project['total_tasks']})"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if project['new_tasks'] > 0:
                    button_text += f" üÜï{project['new_tasks']}"
                if project['in_progress_tasks'] > 0:
                    button_text += f" ‚è≥{project['in_progress_tasks']}"
                
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"project_{project['chat_id']}_0"  # page 0
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            keyboard.append([
                InlineKeyboardButton("üìã –í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="all_my_tasks_0")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            role_text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "üë§ –ö–ª–∏–µ–Ω—Ç"
            
            projects_message = f"""
üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç** ({role_text})

–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ {len(projects)} –ø—Ä–æ–µ–∫—Ç–∞—Ö:

            """
            
            for project in projects:
                projects_message += f"""
üìÅ **{project['chat_name']}**
üìä –ó–∞–¥–∞—á: {project['total_tasks']} (üÜï{project['new_tasks']} ‚è≥{project['in_progress_tasks']} ‚úÖ{project['completed_tasks']})
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è: {project['last_activity'].strftime('%d.%m.%Y')}

                """
            
            await update.message.reply_text(
                projects_message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /tasks: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    


    @admin_only
    @log_user_action("my_stats")
    async def my_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = str(update.effective_user.id)
            user_stats = analytics_service.get_user_statistics(user_id)
            
            if user_stats['total_tasks'] == 0:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
                return
            
            stats_text = f"""
üë§ **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {user_stats['total_tasks']}
üìÖ –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: {user_stats['first_task_date']}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–¥–∞—á–∞: {user_stats['last_task_date']}
‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {user_stats['completion_rate']}%

**–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:**
üÜï –ù–æ–≤—ã–µ: {user_stats['by_status'].get('new', 0)}
‚è≥ –í —Ä–∞–±–æ—Ç–µ: {user_stats['by_status'].get('in_progress', 0)}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {user_stats['by_status'].get('completed', 0)}
‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {user_stats['by_status'].get('cancelled', 0)}

**–ü–æ —Ç–∏–ø–∞–º:**
üêõ –ë–∞–≥–∏: {user_stats['by_type'].get('bug', 0)}
üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {user_stats['by_type'].get('requirement', 0)}
üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {user_stats['by_type'].get('consultation', 0)}
            """
            
            if user_stats['average_resolution_time']:
                stats_text += f"\n‚è±Ô∏è **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è:** {user_stats['average_resolution_time']} —á"
            
            await update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    @admin_only
    @log_user_action("daily_report")
    async def daily_report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–µ–≥–æ–¥–Ω—è)
            target_date = None
            if context.args and len(context.args) > 0:
                try:
                    target_date = datetime.strptime(context.args[0], "%Y-%m-%d")
                except ValueError:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD"
                    )
                    return
            
            report = analytics_service.generate_daily_report(target_date)
            
            report_text = f"""
üìÖ **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {report['date']}**

**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**
‚ûï –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: {report['created_tasks']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: {report['completed_tasks']}
üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {report['new_users']}
üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {report['active_chats']}

**–°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º:**
üêõ –ë–∞–≥–∏: {report['created_by_type'].get('bug', 0)}
üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {report['created_by_type'].get('requirement', 0)}
üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {report['created_by_type'].get('consultation', 0)}

**–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø–∞–º:**
üêõ –ë–∞–≥–∏: {report['completed_by_type'].get('bug', 0)}
üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {report['completed_by_type'].get('requirement', 0)}
üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {report['completed_by_type'].get('consultation', 0)}

**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:**
üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω —Ç–∏–ø: {report['tasks_with_confirmed_type']} –∏–∑ {report['created_tasks']}
üîó –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Bitrix24: {report['tasks_sent_to_bitrix']} –∏–∑ {report['created_tasks']}
            """
            
            await update.message.reply_text(report_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
    
    @admin_only
    @log_user_action("sync")
    async def sync_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á —Å –ë–∏—Ç—Ä–∏–∫—Å24"""
        try:
            await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å –ë–∏—Ç—Ä–∏–∫—Å24...")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            status_sync_service.set_telegram_app(context.application)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            await status_sync_service.sync_all_active_tasks()
            
            await update.message.reply_text(
                "‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –≤ –ë–∏—Ç—Ä–∏–∫—Å24.",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –ë–∏—Ç—Ä–∏–∫—Å24.")
    
    @admin_only
    @log_user_action("add_admin")
    async def add_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if len(context.args) != 1:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add_admin <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>`\n\n"
                "–ü–æ–ª—É—á–∏—Ç—å ID –º–æ–∂–Ω–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã `/users`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            target_user_id = context.args[0]
            admin_user_id = str(update.effective_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            target_role = user_management.get_user_role(target_user_id)
            if not target_role:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            
            if target_role == UserRole.ADMIN:
                await update.message.reply_text("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            success = user_management.set_user_role(target_user_id, UserRole.ADMIN, admin_user_id)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**\n\n"
                    f"üÜî **ID:** {target_user_id}\n"
                    f"üëë **–ù–æ–≤–∞—è —Ä–æ–ª—å:** –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
                    f"‚è∞ **–ù–∞–∑–Ω–∞—á–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
    
    @admin_only
    @log_user_action("remove_admin")
    async def remove_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if len(context.args) != 1:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/remove_admin <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            target_user_id = context.args[0]
            admin_user_id = str(update.effective_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è
            if target_user_id == admin_user_id:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ü–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            target_role = user_management.get_user_role(target_user_id)
            if target_role != UserRole.ADMIN:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                return
            
            # –ü–æ–Ω–∏–∂–∞–µ–º –¥–æ –∫–ª–∏–µ–Ω—Ç–∞
            success = user_management.set_user_role(target_user_id, UserRole.CLIENT, admin_user_id)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ **–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–æ–∑–≤–∞–Ω—ã**\n\n"
                    f"üÜî **ID:** {target_user_id}\n"
                    f"üë§ **–ù–æ–≤–∞—è —Ä–æ–ª—å:** –ö–ª–∏–µ–Ω—Ç\n"
                    f"‚è∞ **–ò–∑–º–µ–Ω–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")
    
    @admin_only
    @log_user_action("users")
    async def users_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        try:
            users = user_management.get_all_users()
            
            if not users:
                await update.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            users_text = "üë• **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            
            for user in users:
                role_emoji = "üëë" if user.role == UserRole.ADMIN.value else "üë§"
                role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user.role == UserRole.ADMIN.value else "–ö–ª–∏–µ–Ω—Ç"
                
                username = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()
                
                users_text += f"""
{role_emoji} **{username}**
üÜî ID: `{user.telegram_user_id}`
üè∑Ô∏è –†–æ–ª—å: {role_name}
üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}
                """
                
                if user.added_by:
                    users_text += f"üë§ –î–æ–±–∞–≤–∏–ª: {user.added_by}\n"
                
                users_text += "\n---\n"
            
            users_text += f"\nüìä **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {len(users)}"
            
            await update.message.reply_text(users_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    
    @client_or_admin
    @log_user_action("my_role")
    async def my_role_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π —Ä–æ–ª–∏"""
        try:
            user_id = str(update.effective_user.id)
            user_stats = user_management.get_user_stats(user_id)
            
            if not user_stats:
                await update.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            user = user_stats["user"]
            role_emoji = "üëë" if user.role == UserRole.ADMIN.value else "üë§"
            role_name = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user.role == UserRole.ADMIN.value else "–ö–ª–∏–µ–Ω—Ç"
            
            username_display = f"@{user.username}" if user.username else "–ù–µ —É–∫–∞–∑–∞–Ω"
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown
            username_display = username_display.replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("]", "\\]")
            
            info_text = f"""
{role_emoji} **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ**

üë§ **–ò–º—è:** {user.first_name} {user.last_name or ''}
üÜî **ID:** `{user.telegram_user_id}`
üì± **Username:** {username_display}
üè∑Ô∏è **–†–æ–ª—å:** {role_name}
üìÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:** {user.created_at.strftime('%d.%m.%Y %H:%M')}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
üìù –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {user_stats['total_tasks']}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {user_stats['completed_tasks']}
üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {user_stats['completion_rate']}%
            """
            
            if user.role == UserRole.ADMIN.value:
                info_text += f"\nüëë **–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
                info_text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á\n"
                info_text += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                info_text += f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ\n"
                info_text += f"‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–∏—Ç—Ä–∏–∫—Å24"
            
            await update.message.reply_text(info_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–ª–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
    
    @admin_only
    @log_user_action("add_employee")
    async def add_employee_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã (—á–∞—Ç—ã) –≥–¥–µ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
            user_id = str(update.effective_user.id)
            projects = project_service.get_user_projects(user_id, is_admin=True)
            
            if not projects:
                await update.message.reply_text(
                    "üìÇ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏.\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            keyboard = []
            
            for project in projects:
                project_name = project['chat_name'][:30]
                employees_count = len(employee_service.get_chat_employees(project['chat_id']))
                
                button_text = f"üìÅ {project_name} ({employees_count} —Å–æ—Ç—Ä.)"
                
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"add_emp_project_{project['chat_id']}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message_text = """
üë• **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç**

–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:

            """
            
            for project in projects:
                employees_count = len(employee_service.get_chat_employees(project['chat_id']))
                message_text += f"üìÅ **{project['chat_name']}** - {employees_count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
            
            await update.message.reply_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ add_employee: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    
    @admin_only
    @log_user_action("chat_employees")
    async def chat_employees_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        if len(context.args) != 1:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/chat_employees <ID —á–∞—Ç–∞>`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            chat_id = context.args[0]
            employees = employee_service.get_chat_employees(chat_id)
            
            if not employees:
                await update.message.reply_text(f"üë• –í —á–∞—Ç–µ `{chat_id}` –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
                return
            
            employees_text = f"üë• **–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —á–∞—Ç–∞** `{chat_id}`\n\n"
            
            for employee in employees:
                employees_text += f"""
üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** `{employee.telegram_user_id}`
üîó **Bitrix24 ID:** {employee.bitrix24_user_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ **–î–æ–±–∞–≤–ª–µ–Ω:** {employee.added_at.strftime('%d.%m.%Y %H:%M')}
üë§ **–î–æ–±–∞–≤–∏–ª:** {employee.added_by or '–°–∏—Å—Ç–µ–º–∞'}

                """
            
            employees_text += f"üìä **–í—Å–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:** {len(employees)}"
            
            await update.message.reply_text(employees_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
    
    @admin_only
    @log_user_action("manage_employees")
    async def manage_employees_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            user_id = str(update.effective_user.id)
            projects = project_service.get_user_projects(user_id, is_admin=True)
            
            if not projects:
                await update.message.reply_text(
                    "üìÇ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            keyboard = []
            
            for project in projects:
                project_name = project['chat_name'][:25]
                employees_count = len(employee_service.get_chat_employees(project['chat_id']))
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìÅ {project_name} ({employees_count})",
                        callback_data=f"manage_emp_{project['chat_id']}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ manage_employees: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    
    async def handle_chat_member_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
        try:
            chat_member_update = update.chat_member
            
            if not chat_member_update:
                return
            
            chat = chat_member_update.chat
            user = chat_member_update.new_chat_member.user
            old_status = chat_member_update.old_chat_member.status
            new_status = chat_member_update.new_chat_member.status
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –±–æ—Ç–∞ –≤ —á–∞—Ç
            if user.id == context.bot.id and new_status in ['member', 'administrator']:
                await self.handle_bot_added_to_chat(context, chat)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            elif new_status in ['member', 'administrator'] and old_status in ['left', 'kicked']:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat.id}")
                
            elif new_status in ['left', 'kicked'] and old_status in ['member', 'administrator']:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–¥–∞–ª–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat.id}")
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –µ—Å–ª–∏ –±—ã–ª
                employee_service.remove_employee_from_chat(str(chat.id), str(user.id), "chat_leave")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {e}")
    
    async def handle_bot_added_to_chat(self, context: ContextTypes.DEFAULT_TYPE, chat):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –Ω–æ–≤—ã–π —á–∞—Ç"""
        try:
            welcome_message = f"""
ü§ñ **–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç!**

üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ë–∏—Ç—Ä–∏–∫—Å24.

üìÇ **–ü—Ä–æ–µ–∫—Ç:** {chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
üÜî **ID —á–∞—Ç–∞:** `{chat.id}`

üîß **–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω:**
1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: `/add_employee {chat.id} <user_id> [bitrix24_id]`
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫: `/chat_employees {chat.id}`

üìù **–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á:**
‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã: —É–ø–æ–º—è–Ω–∏—Ç–µ `@{context.bot.username}` - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: —É–ø–æ–º—è–Ω–∏—Ç–µ `@{context.bot.username}` - –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º
‚Ä¢ Reply: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å `@{context.bot.username}` - –≤—ã —Å—Ç–∞–Ω–µ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º

üéØ **–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**
            """
            
            await context.bot.send_message(
                chat_id=chat.id,
                text=welcome_message,
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat.id} ({chat.title})")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")
    
    async def handle_project_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–∫–∞–∑ –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ callback
            data_parts = query.data.split("_")
            
            if len(data_parts) < 3:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞.")
                return
            
            user_id = str(query.from_user.id)
            user_role = user_management.get_user_role(user_id)
            is_admin = user_role == UserRole.ADMIN
            
            if data_parts[0] == "project":
                # –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                chat_id = data_parts[1]
                page = int(data_parts[2])
                
                project_data = project_service.get_project_tasks(chat_id, user_id, is_admin, page)
                await self.show_project_tasks(query, project_data)
                
            elif data_parts[0] == "all" and data_parts[1] == "my":
                # –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                page = int(data_parts[3])
                await self.show_all_user_tasks(query, user_id, is_admin, page)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")
    
    async def show_project_tasks(self, query, project_data: Dict[str, Any]):
        """–ü–æ–∫–∞–∑ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            tasks = project_data['tasks']
            page = project_data['page']
            total_pages = project_data['total_pages']
            chat_id = project_data['chat_id']
            
            if not tasks:
                await query.edit_message_text(
                    f"üìÇ **{project_data['chat_name']}**\n\n"
                    "üìù –í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞–¥–∞—á."
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∑–∞–¥–∞—á–∞–º–∏
            tasks_text = f"""
üìÇ **{project_data['chat_name']}**
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} | üìä –í—Å–µ–≥–æ: {project_data['total_tasks']}

            """
            
            for task in tasks:
                status_emoji = {
                    TaskStatus.NEW: "üÜï",
                    TaskStatus.IN_PROGRESS: "‚è≥", 
                    TaskStatus.COMPLETED: "‚úÖ",
                    TaskStatus.CANCELLED: "‚ùå"
                }
                
                type_emoji = {
                    TaskType.BUG: "üêõ",
                    TaskType.REQUIREMENT: "üìã",
                    TaskType.CONSULTATION: "üí¨"
                }
                
                task_status = TaskStatus(task.status) if task.status else None
                task_type = TaskType(task.task_type) if task.task_type else None
                
                tasks_text += f"""
**#{task.id}** {status_emoji.get(task_status, '‚ùì')} {type_emoji.get(task_type, '‚ùì')}
**{task.title[:50]}{'...' if len(task.title) > 50 else ''}**
üìÖ {task.created_at.strftime('%d.%m %H:%M')}
                """
                
                if task.bitrix24_task_id:
                    tasks_text += f" | üîó B24:{task.bitrix24_task_id}"
                
                tasks_text += "\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if project_data['has_prev']:
                nav_buttons.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"project_{chat_id}_{page-1}")
                )
            
            nav_buttons.append(
                InlineKeyboardButton(f"üìÑ {page + 1}/{total_pages}", callback_data="noop")
            )
            
            if project_data['has_next']:
                nav_buttons.append(
                    InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"project_{chat_id}_{page+1}")
                )
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤
            keyboard.append([
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                tasks_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á –ø—Ä–æ–µ–∫—Ç–∞.")
    
    async def show_all_user_tasks(self, query, user_id: str, is_admin: bool, page: int):
        """–ü–æ–∫–∞–∑ –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            per_page = 5
            offset = page * per_page
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tasks = self.task_service.get_user_tasks(user_id)
            total_tasks = len(tasks)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            paginated_tasks = tasks[offset:offset + per_page]
            total_pages = (total_tasks + per_page - 1) // per_page
            
            if not paginated_tasks:
                await query.edit_message_text("üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            role_text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "üë§ –ö–ª–∏–µ–Ω—Ç"
            
            tasks_text = f"""
üìã **–í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏** ({role_text})
üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} | üìä –í—Å–µ–≥–æ: {total_tasks}

            """
            
            for task in paginated_tasks:
                status_emoji = {
                    TaskStatus.NEW: "üÜï",
                    TaskStatus.IN_PROGRESS: "‚è≥", 
                    TaskStatus.COMPLETED: "‚úÖ",
                    TaskStatus.CANCELLED: "‚ùå"
                }
                
                type_emoji = {
                    TaskType.BUG: "üêõ",
                    TaskType.REQUIREMENT: "üìã",
                    TaskType.CONSULTATION: "üí¨"
                }
                
                task_status = TaskStatus(task.status) if task.status else None
                task_type = TaskType(task.task_type) if task.task_type else None
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                project_name = project_service._get_chat_name_from_task(task)
                
                tasks_text += f"""
**#{task.id}** {status_emoji.get(task_status, '‚ùì')} {type_emoji.get(task_type, '‚ùì')}
**{task.title[:40]}{'...' if len(task.title) > 40 else ''}**
üìÅ {project_name[:20]}
üìÖ {task.created_at.strftime('%d.%m %H:%M')}

                """
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"all_my_tasks_{page-1}")
                )
            
            nav_buttons.append(
                InlineKeyboardButton(f"üìÑ {page + 1}/{total_pages}", callback_data="noop")
            )
            
            if (page + 1) * per_page < total_tasks:
                nav_buttons.append(
                    InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"all_my_tasks_{page+1}")
                )
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤
            keyboard.append([
                InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_projects")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                tasks_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á.")
    
    async def handle_back_to_projects(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        user_id = str(query.from_user.id)
        logger.info(f"üîç –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ–µ–∫—Ç–∞–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_role = user_management.get_user_role(user_id)
            is_admin = user_role == UserRole.ADMIN
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            projects = project_service.get_user_projects(user_id, is_admin)
            
            if not projects:
                await query.edit_message_text(
                    "üìÇ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏.\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á—É, —É–ø–æ–º—è–Ω—É–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!"
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            keyboard = []
            
            for project in projects:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                project_name = project['chat_name'][:25]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                
                button_text = f"üìÅ {project_name} ({project['total_tasks']})"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if project['new_tasks'] > 0:
                    button_text += f" üÜï{project['new_tasks']}"
                if project['in_progress_tasks'] > 0:
                    button_text += f" ‚è≥{project['in_progress_tasks']}"
                
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"project_{project['chat_id']}_0"  # page 0
                    )
                ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            keyboard.append([
                InlineKeyboardButton("üìã –í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="all_my_tasks_0")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            role_text = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if is_admin else "üë§ –ö–ª–∏–µ–Ω—Ç"
            
            projects_message = f"""
üìÇ **–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç** ({role_text})

–£ –≤–∞—Å –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ {len(projects)} –ø—Ä–æ–µ–∫—Ç–∞—Ö:

            """
            
            for project in projects:
                projects_message += f"""
üìÅ **{project['chat_name']}**
üìä –ó–∞–¥–∞—á: {project['total_tasks']} (üÜï{project['new_tasks']} ‚è≥{project['in_progress_tasks']} ‚úÖ{project['completed_tasks']})
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è: {project['last_activity'].strftime('%d.%m.%Y')}

                """
            
            await query.edit_message_text(
                projects_message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    
    async def handle_employee_management(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            data_parts = query.data.split("_")
            
            if data_parts[0] == "add" and data_parts[1] == "emp" and data_parts[2] == "project":
                # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                chat_id = data_parts[3]
                await self.show_available_employees(query, chat_id)
                
            elif data_parts[0] == "emp" and data_parts[1] == "page":
                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
                chat_id = data_parts[2]
                page = int(data_parts[3])
                await self.show_available_employees(query, chat_id, page)
                
            elif data_parts[0] == "manage" and data_parts[1] == "emp":
                # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞
                chat_id = data_parts[2]
                await self.show_project_employee_management(query, chat_id)
                
            elif data_parts[0] == "add" and data_parts[1] == "bitrix" and data_parts[2] == "user":
                # –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
                chat_id = data_parts[3]
                bitrix_user_id = data_parts[4]
                await self.add_bitrix_employee_to_chat(query, chat_id, bitrix_user_id, context)
                
            elif data_parts[0] == "remove" and data_parts[1] == "emp":
                # –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
                chat_id = data_parts[2]
                user_id = data_parts[3]
                await self.remove_employee_from_project(query, chat_id, user_id)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    async def show_available_employees(self, query, chat_id: str, page: int = 0):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö, –Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö)
            all_bitrix_users = bitrix24_api.get_users()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –∏–º—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å (—Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏)
            bitrix_users = [
                user for user in all_bitrix_users 
                if user.get("NAME") and user.get("NAME").strip() and 
                   user.get("WORK_POSITION") and user.get("WORK_POSITION").strip()
            ]
            
            # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            existing_employees = employee_service.get_chat_employees(chat_id)
            existing_ids = [emp.bitrix24_user_id for emp in existing_employees if emp.bitrix24_user_id]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ Telegram ID
            available_users = []
            for user in bitrix_users:
                user_id = int(user.get("ID", 0))
                if user_id not in existing_ids:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π Telegram ID
                    linked_telegram_id = employee_service.find_linked_telegram_id(user_id)
                    user["linked_telegram_id"] = linked_telegram_id
                    available_users.append(user)
            
            if not available_users:
                await query.edit_message_text(
                    "üë• –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ø—Ä–æ–µ–∫—Ç."
                )
                return
            
            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            page_size = 5
            total_pages = (len(available_users) + page_size - 1) // page_size
            start_idx = page * page_size
            end_idx = start_idx + page_size
            page_users = available_users[start_idx:end_idx]
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
            keyboard = []
            
            for user in page_users:
                user_id = user.get("ID")
                user_name = f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip()
                user_position = user.get("WORK_POSITION", "")
                linked_telegram_id = user.get("linked_telegram_id")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
                if linked_telegram_id:
                    button_text = f"üîó {user_name}"
                    if user_position:
                        button_text += f" ({user_position[:20]})"
                else:
                    button_text = f"üë§ {user_name}"
                    if user_position:
                        button_text += f" ({user_position[:20]})"
                
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"add_bitrix_user_{chat_id}_{user_id}"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if page > 0:
                nav_buttons.append(
                    InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"emp_page_{chat_id}_{page-1}")
                )
            
            nav_buttons.append(
                InlineKeyboardButton(f"üìÑ {page + 1}/{total_pages}", callback_data="noop")
            )
            
            if page < total_pages - 1:
                nav_buttons.append(
                    InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"emp_page_{chat_id}_{page+1}")
                )
            
            if nav_buttons:
                keyboard.append(nav_buttons)
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.append([
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º", callback_data="back_to_manage_employees")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            project_name = project_service._get_chat_name_from_task_by_chat_id(chat_id)
            
            message_text = f"""
üë• **–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ø—Ä–æ–µ–∫—Ç**
üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project_name}
üìÑ **–°—Ç—Ä–∞–Ω–∏—Ü–∞:** {page + 1} –∏–∑ {total_pages}

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24:**

üîó - —É–∂–µ —Å–≤—è–∑–∞–Ω —Å Telegram
üë§ - —Ç—Ä–µ–±—É–µ—Ç —Å–≤—è–∑—ã–≤–∞–Ω–∏—è

            """
            
            for user in page_users:
                user_name = f"{user.get('NAME', '')} {user.get('LAST_NAME', '')}".strip()
                position = user.get("WORK_POSITION", "")
                linked_status = "üîó –°–≤—è–∑–∞–Ω" if user.get("linked_telegram_id") else "üë§ –¢—Ä–µ–±—É–µ—Ç —Å–≤—è–∑—ã–≤–∞–Ω–∏—è"
                message_text += f"{linked_status} **{user_name}** - {position}\n"
            
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24.")
    
    async def show_project_employee_management(self, query, chat_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            employees = employee_service.get_chat_employees(chat_id)
            project_name = project_service._get_chat_name_from_task_by_chat_id(chat_id)
            
            if not employees:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å
                keyboard = [
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=f"add_emp_project_{chat_id}")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_employees")]
                ]
                
                await query.edit_message_text(
                    f"üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏**\n"
                    f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project_name}\n\n"
                    "–í –ø—Ä–æ–µ–∫—Ç–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
            keyboard = []
            
            # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            keyboard.append([
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data=f"add_emp_project_{chat_id}")
            ])
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            for employee in employees:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
                bitrix_user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                if employee.bitrix24_user_id:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
                    bitrix_user_name = f"ID: {employee.bitrix24_user_id}"
                
                button_text = f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {bitrix_user_name}"
                
                keyboard.append([
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"remove_emp_{chat_id}_{employee.telegram_user_id}"
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard.append([
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_employees")
            ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            employees_text = f"""
üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏**
üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project_name}

**–¢–µ–∫—É—â–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ({len(employees)}):**

            """
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ë–∏—Ç—Ä–∏–∫—Å24 –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –§–ò–û
            all_bitrix_users = bitrix24_api.get_users()
            
            for employee in employees:
                # –ò—â–µ–º –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ë–∏—Ç—Ä–∏–∫—Å24
                user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                if employee.bitrix24_user_id:
                    user_info = next((u for u in all_bitrix_users if u.get("ID") == str(employee.bitrix24_user_id)), None)
                    if user_info:
                        user_name = f"{user_info.get('NAME', '')} {user_info.get('LAST_NAME', '')}".strip()
                
                employees_text += f"""
üë§ **–§–ò–û:** {user_name}
üì± **Telegram ID:** `{employee.telegram_user_id}`
üîó **Bitrix24 ID:** {employee.bitrix24_user_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ **–î–æ–±–∞–≤–ª–µ–Ω:** {employee.added_at.strftime('%d.%m.%Y')}

                """
            
            await query.edit_message_text(
                employees_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞.")
    
    async def add_bitrix_employee_to_chat(self, query, chat_id: str, bitrix_user_id: str, context):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 –≤ —á–∞—Ç"""
        try:
            admin_id = str(query.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24
            all_bitrix_users = bitrix24_api.get_users()
            user_info = next((u for u in all_bitrix_users if u.get("ID") == bitrix_user_id), None)
            
            if not user_info:
                await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–∏—Ç—Ä–∏–∫—Å24.")
                return
            
            user_name = f"{user_info.get('NAME', '')} {user_info.get('LAST_NAME', '')}".strip()
            user_email = user_info.get('EMAIL', '')
            user_position = user_info.get('WORK_POSITION', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π Telegram ID
            linked_telegram_id = employee_service.find_linked_telegram_id(int(bitrix_user_id))
            
            if linked_telegram_id:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π Telegram ID
                telegram_id_to_use = linked_telegram_id
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π Telegram ID {linked_telegram_id} –¥–ª—è Bitrix24 ID {bitrix_user_id}")
            else:
                # –°–æ–∑–¥–∞–µ–º pending –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
                telegram_id_to_use = f"pending_{bitrix_user_id}"
                logger.info(f"–°–æ–∑–¥–∞–µ–º pending –∑–∞–ø–∏—Å—å –¥–ª—è Bitrix24 ID {bitrix_user_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            success = employee_service.add_employee_to_chat(
                chat_id, 
                telegram_id_to_use,
                int(bitrix_user_id), 
                admin_id
            )
            
            if success:
                project_name = project_service._get_chat_name_from_task_by_chat_id(chat_id)
                
                if linked_telegram_id:
                    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ —Å–≤—è–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    keyboard = [
                        [InlineKeyboardButton(
                            "üîô –ù–∞–∑–∞–¥ –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º", 
                            callback_data=f"add_emp_project_{chat_id}"
                        )]
                    ]
                    
                    message_text = f"""
‚úÖ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç**

üë§ **–ò–º—è:** {user_name}
üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {user_position}
üîó **Bitrix24 ID:** {bitrix_user_id}
üì± **Telegram ID:** `{linked_telegram_id}`
üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project_name}
‚è∞ **–î–æ–±–∞–≤–ª–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚úÖ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!** Telegram ID —É–∂–µ —Å–≤—è–∑–∞–Ω.
                    """
                    
                else:
                    # –°—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Telegram ID
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
                    context.user_data['pending_employee'] = {
                        'chat_id': chat_id,
                        'bitrix_id': bitrix_user_id,
                        'user_name': user_name,
                        'user_position': user_position,
                        'user_email': user_email,
                        'project_name': project_name
                    }
                    
                    keyboard = [
                        [InlineKeyboardButton(
                            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                            callback_data=f"add_emp_project_{chat_id}"
                        )]
                    ]
                    
                    message_text = f"""
üîó **–°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å Telegram**

üë§ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫:** {user_name}
üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {user_position}
üìß **Email:** {user_email}
üÜî **Bitrix24 ID:** {bitrix_user_id}
üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project_name}

üìù **–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:**

üì± **–§–æ—Ä–º–∞—Ç:** –ü—Ä–æ—Å—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 608167496)
üîç **–ö–∞–∫ –Ω–∞–π—Ç–∏ ID:** –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID, –Ω–∞–ø–∏—Å–∞–≤ –±–æ—Ç—É /start

‚è≥ **–û–∂–∏–¥–∞—é –≤–≤–æ–¥ Telegram ID...**
                    """
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    message_text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
    
    async def remove_employee_from_project(self, query, chat_id: str, user_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            admin_id = str(query.from_user.id)
            
            logger.info(f"üóëÔ∏è –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {user_id} –∏–∑ —á–∞—Ç–∞ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            employee = None
            db = get_db_session()
            try:
                from models import ChatEmployee
                employee = db.query(ChatEmployee).filter(
                    ChatEmployee.telegram_chat_id == chat_id,
                    ChatEmployee.telegram_user_id == user_id,
                    ChatEmployee.is_active == True
                ).first()
                
                if not employee:
                    await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ.")
                    return
                
            finally:
                db.close()
            
            success = employee_service.remove_employee_from_chat(chat_id, user_id, admin_id)
            
            if success:
                project_name = project_service._get_chat_name_from_task_by_chat_id(chat_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 –µ—Å–ª–∏ –µ—Å—Ç—å ID
                employee_name = f"ID: {user_id}"
                if employee and employee.bitrix24_user_id:
                    bitrix_users = bitrix24_api.get_users()
                    user_info = next((u for u in bitrix_users if u.get("ID") == str(employee.bitrix24_user_id)), None)
                    if user_info:
                        employee_name = f"{user_info.get('NAME', '')} {user_info.get('LAST_NAME', '')}".strip()
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é
                keyboard = [
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data=f"manage_emp_{chat_id}")],
                    [InlineKeyboardButton("üè† –ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="back_to_manage_employees")]
                ]
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"‚úÖ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞**\n\n"
                    f"üë§ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫:** {employee_name}\n"
                    f"üÜî **Telegram ID:** `{user_id}`\n"
                    f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {project_name}\n"
                    f"‚è∞ **–£–¥–∞–ª–µ–Ω–æ:** {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await query.edit_message_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
    

    
    async def handle_manual_telegram_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è Telegram ID"""
        query = update.callback_query
        await query.answer()
        
        try:
            data_parts = query.data.split("_")
            chat_id = data_parts[2]
            bitrix_user_id = data_parts[3]
            
            # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ Telegram ID
            await query.edit_message_text(
                f"üîó **–°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å Telegram**\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start\n\n"
                f"**–§–æ—Ä–º–∞—Ç:** –ü—Ä–æ—Å—Ç–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 608167496)\n"
                f"**Bitrix24 ID:** {bitrix_user_id}",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
            self.session_service.create_or_update_session(
                telegram_user_id=str(query.from_user.id),
                state="waiting_telegram_id",
                context={
                    "chat_id": chat_id,
                    "bitrix_user_id": bitrix_user_id
                }
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏.")
    
    async def handle_back_to_manage_employees(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏"""
        query = update.callback_query
        await query.answer()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
            user_id = str(query.from_user.id)
            projects = project_service.get_user_projects(user_id, is_admin=True)
            
            if not projects:
                await query.edit_message_text(
                    "üìÇ –ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏."
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
            keyboard = []
            
            for project in projects:
                project_name = project['chat_name'][:25]
                employees_count = len(employee_service.get_chat_employees(project['chat_id']))
                
                keyboard.append([
                    InlineKeyboardButton(
                        f"üìÅ {project_name} ({employees_count})",
                        callback_data=f"manage_emp_{project['chat_id']}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:",
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
    
    async def handle_employee_telegram_id_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID –¥–ª—è –¥–æ–±–∞–≤–ª—è–µ–º–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        message = update.message
        user_id = str(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if 'pending_employee' not in context.user_data:
            return
        
        employee_data = context.user_data['pending_employee']
        
        try:
            # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π Telegram ID
            telegram_id = message.text.strip()
            
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
            if not telegram_id.isdigit():
                await message.reply_text(
                    "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n\n"
                    "üì± Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 608167496)\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç Telegram ID –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º Bitrix ID
            existing_bitrix_id = employee_service.get_bitrix_id_by_telegram_id(telegram_id)
            if existing_bitrix_id and str(existing_bitrix_id) != str(employee_data['bitrix_id']):
                await message.reply_text(
                    f"‚ùå **–≠—Ç–æ—Ç Telegram ID —É–∂–µ —Å–≤—è–∑–∞–Ω!**\n\n"
                    f"üì± ID `{telegram_id}` —É–∂–µ —Å–≤—è–∑–∞–Ω —Å Bitrix24 ID: {existing_bitrix_id}\n"
                    f"üîÑ –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π Telegram ID:",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–≤—è–∑—å
            employee_service.update_global_user_profile(telegram_id, int(employee_data['bitrix_id']))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º pending –∑–∞–ø–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
            success = employee_service.update_employee_telegram_id(
                employee_data['chat_id'], 
                f"pending_{employee_data['bitrix_id']}", 
                telegram_id
            )
            
            if success:
                await message.reply_text(
                    f"‚úÖ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç!**\n\n"
                    f"üë§ **–ò–º—è:** {employee_data['user_name']}\n"
                    f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {employee_data.get('user_position', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    f"üìß **Email:** {employee_data.get('user_email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    f"üÜî **Bitrix24 ID:** {employee_data['bitrix_id']}\n"
                    f"üì± **Telegram ID:** `{telegram_id}`\n"
                    f"üìÅ **–ü—Ä–æ–µ–∫—Ç:** {employee_data.get('project_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n\n"
                    f"üéØ **–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:**\n"
                    f"‚Ä¢ –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
                    f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤–æ –≤—Å–µ –±—É–¥—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã\n"
                    f"‚Ä¢ –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
            
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
            del context.user_data['pending_employee']
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {e}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")
            # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if 'pending_employee' in context.user_data:
                del context.user_data['pending_employee']
    
    @admin_only
    @log_user_action("link_telegram")
    async def link_telegram_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–≤—è–∑—ã–≤–∞–Ω–∏–µ Bitrix24 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID —á–µ—Ä–µ–∑ tgID"""
        if len(context.args) != 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/link_telegram <Bitrix24_ID> <Telegram_ID>`\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/link_telegram 123 608167496`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            bitrix_user_id = int(context.args[0])
            telegram_id = context.args[1]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Telegram ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            if not telegram_id.isdigit():
                await update.message.reply_text("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ Bitrix24
            all_users = bitrix24_api.get_users()
            bitrix_user = next((u for u in all_users if u.get("ID") == str(bitrix_user_id)), None)
            
            if not bitrix_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Bitrix24 ID {bitrix_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç Telegram ID —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            existing_bitrix_id = telegram_bitrix_sync.get_bitrix_user_id(telegram_id)
            if existing_bitrix_id and existing_bitrix_id != bitrix_user_id:
                await update.message.reply_text(
                    f"‚ùå Telegram ID {telegram_id} —É–∂–µ —Å–≤—è–∑–∞–Ω —Å Bitrix24 ID {existing_bitrix_id}.\n"
                    "–°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–≤—è–∑—å –∫–æ–º–∞–Ω–¥–æ–π `/unlink_telegram`.",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
            success = telegram_bitrix_sync.add_telegram_link(bitrix_user_id, telegram_id)
            
            if success:
                user_name = f"{bitrix_user.get('NAME', '')} {bitrix_user.get('LAST_NAME', '')}".strip()
                user_position = bitrix_user.get('WORK_POSITION', '')
                
                await update.message.reply_text(
                    f"‚úÖ **–°–≤—è–∑—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                    f"üë§ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫:** {user_name}\n"
                    f"üíº **–î–æ–ª–∂–Ω–æ—Å—Ç—å:** {user_position}\n"
                    f"üÜî **Bitrix24 ID:** {bitrix_user_id}\n"
                    f"üì± **Telegram ID:** `{telegram_id}`\n\n"
                    f"üéØ **–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫:**\n"
                    f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫\n"
                    f"‚Ä¢ –ó–∞–¥–∞—á–∏ –Ω–∞–∑–Ω–∞—á–∞—é—Ç—Å—è –Ω–∞ –Ω–µ–≥–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏\n"
                    f"‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç—ã –≤—Ä—É—á–Ω—É—é",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                telegram_bitrix_sync.refresh_cache()
                
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
        except ValueError:
            await update.message.reply_text("‚ùå Bitrix24 ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑—ã–≤–∞–Ω–∏–∏.")
    
    @admin_only
    @log_user_action("unlink_telegram")
    async def unlink_telegram_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏ Telegram ID —Å Bitrix24"""
        if len(context.args) != 1:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/unlink_telegram <Telegram_ID>`\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/unlink_telegram 608167496`",
                parse_mode=ParseMode.MARKDOWN
            )
            return
        
        try:
            telegram_id = context.args[0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤—è–∑—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            user_info = telegram_bitrix_sync.get_user_info(telegram_id)
            if not user_info:
                await update.message.reply_text(f"‚ùå –°–≤—è–∑—å –¥–ª—è Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return
            
            # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å
            success = telegram_bitrix_sync.remove_telegram_link(telegram_id)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ **–°–≤—è–∑—å —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
                    f"üë§ **–°–æ—Ç—Ä—É–¥–Ω–∏–∫:** {user_info['name']}\n"
                    f"üÜî **Bitrix24 ID:** {user_info['bitrix_id']}\n"
                    f"üì± **Telegram ID:** `{telegram_id}`\n\n"
                    f"‚ö†Ô∏è **–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n"
                    f"‚Ä¢ –ù–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫\n"
                    f"‚Ä¢ –ó–∞–¥–∞—á–∏ –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å—Å—è –Ω–∞ –¢–µ—Ö–ê–∫–∫–∞—É–Ω—Ç",
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                telegram_bitrix_sync.refresh_cache()
                
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–≤—è–∑–∏: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏.")
    
    @admin_only 
    @log_user_action("show_links")
    async def show_links_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–≤—è–∑–∏ Telegram ID —Å Bitrix24"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏
            linked_users = telegram_bitrix_sync.get_all_linked_users()
            
            if not linked_users:
                await update.message.reply_text("üì± –°–≤—è–∑–∞–Ω–Ω—ã–µ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ Bitrix24
            all_bitrix_users = bitrix24_api.get_users()
            
            links_text = f"üì± **–°–≤—è–∑–∞–Ω–Ω—ã–µ Telegram –∞–∫–∫–∞—É–Ω—Ç—ã** ({len(linked_users)})\n\n"
            
            for telegram_id, bitrix_id in linked_users.items():
                # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Bitrix24
                user_info = next((u for u in all_bitrix_users if u.get("ID") == str(bitrix_id)), None)
                
                if user_info:
                    user_name = f"{user_info.get('NAME', '')} {user_info.get('LAST_NAME', '')}".strip()
                    user_position = user_info.get('WORK_POSITION', '')
                    active_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user_info.get('ACTIVE') == 'Y' else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    
                    links_text += f"""
üë§ **{user_name}**
üíº {user_position}
üÜî Bitrix24: {bitrix_id}
üì± Telegram: `{telegram_id}`
üìä –°—Ç–∞—Ç—É—Å: {active_status}

"""
                else:
                    links_text += f"""
‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**
üÜî Bitrix24: {bitrix_id}
üì± Telegram: `{telegram_id}`
‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Bitrix24

"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –±–µ–∑ —Å–≤—è–∑–∏
            unlinked_users = telegram_bitrix_sync.get_unlinked_bitrix_users()
            if unlinked_users:
                links_text += f"\nüîç **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ Telegram ID:** {len(unlinked_users)}\n"
                links_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/link_telegram` –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è."
            
            await update.message.reply_text(links_text, parse_mode=ParseMode.MARKDOWN)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–≤—è–∑–µ–π: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–≤—è–∑–µ–π.")
    
    @admin_only
    @log_user_action("sync_bitrix") 
    async def sync_bitrix_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Bitrix24 - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –∏ —Å–≤—è–∑–µ–π"""
        try:
            await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Bitrix24...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à —Å–≤—è–∑–µ–π
            telegram_bitrix_sync.refresh_cache()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            synced_count = telegram_bitrix_sync.sync_with_local_database()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            linked_users = telegram_bitrix_sync.get_all_linked_users()
            unlinked_users = telegram_bitrix_sync.get_unlinked_bitrix_users()
            
            await update.message.reply_text(
                f"‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
                f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                f"üîó –°–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(linked_users)}\n"
                f"‚ùå –ë–µ–∑ Telegram ID: {len(unlinked_users)}\n"
                f"üíæ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î: {synced_count}\n\n"
                f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/show_links` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Å–≤—è–∑–µ–π.",
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Bitrix24: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Bitrix24.")
    
    async def debug_all_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message
        logger.info(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.type} (ID: {message.chat.id})")
        logger.info(f"üîç DEBUG: –¢–µ–∫—Å—Ç: {message.text}")
        logger.info(f"üîç DEBUG: –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id} ({message.from_user.first_name})")
        
        # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    
    async def create_extended_description(self, message: Message, task_text: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ –∏ —á–∞—Ç–µ"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = message.from_user
        username = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}".strip()
        user_id = user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = message.chat
        chat_name = chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"
        chat_id = chat.id
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        created_at = datetime.now().strftime("%d.%m.%Y %H:%M")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        extended_description = f"""
üìã **–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:**
{task_text}

üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ:**
‚Ä¢ –ò–º—è: {username}
‚Ä¢ ID: {user_id}
‚Ä¢ Telegram: {f"@{user.username}" if user.username else "–ù–µ—Ç username"}

üí¨ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:**
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat_name}
‚Ä¢ ID —á–∞—Ç–∞: {chat_id}
‚Ä¢ –¢–∏–ø —á–∞—Ç–∞: {chat.type}

üìÖ **–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {created_at}

üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:** https://t.me/c/{str(chat_id)[4:]}/{message.message_id}
        """.strip()
        
        return extended_description
    
    async def save_message_files(self, message: Message, task_id: int, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫ –∑–∞–¥–∞—á–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24"""
        files_info = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            files_dir = f"task_files/{task_id}"
            os.makedirs(files_dir, exist_ok=True)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            if message.photo:
                photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                file_info = await self.download_file(context, photo.file_id, files_dir, "photo.jpg")
                if file_info:
                    file_info["type"] = "photo"
                    files_info.append(file_info)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            if message.document:
                doc = message.document
                filename = doc.file_name or f"document_{doc.file_id[:8]}"
                file_info = await self.download_file(context, doc.file_id, files_dir, filename)
                if file_info:
                    file_info["type"] = "document"
                    files_info.append(file_info)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            if message.video:
                video = message.video
                filename = f"video_{video.file_id[:8]}.mp4"
                file_info = await self.download_file(context, video.file_id, files_dir, filename)
                if file_info:
                    file_info["type"] = "video"
                    files_info.append(file_info)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            if message.audio:
                audio = message.audio
                filename = audio.file_name or f"audio_{audio.file_id[:8]}.mp3"
                file_info = await self.download_file(context, audio.file_id, files_dir, filename)
                if file_info:
                    file_info["type"] = "audio"
                    files_info.append(file_info)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.voice:
                voice = message.voice
                filename = f"voice_{voice.file_id[:8]}.ogg"
                file_info = await self.download_file(context, voice.file_id, files_dir, filename)
                if file_info:
                    file_info["type"] = "voice"
                    files_info.append(file_info)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö –≤ –ë–∏—Ç—Ä–∏–∫—Å24
            if files_info:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è bitrix24_task_id
                task = self.task_service.get_task(task_id)
                if task and task.bitrix24_task_id:
                    uploaded_files = []
                    
                    for file_info in files_info:
                        try:
                            # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –∫ –∑–∞–¥–∞—á–µ –≤ –ë–∏—Ç—Ä–∏–∫—Å24 —á–µ—Ä–µ–∑ —Å—Å—ã–ª–∫—É Telegram
                            telegram_file_url = file_info.get('telegram_file_url', '')
                            
                            if telegram_file_url:
                                upload_result = bitrix24_api.attach_telegram_file_to_task(
                                    task.bitrix24_task_id, 
                                    file_info,
                                    telegram_file_url
                                )
                                
                                if upload_result.get("success"):
                                    uploaded_files.append(file_info['filename'])
                                    logger.info(f"‚úÖ –§–∞–π–ª {file_info['filename']} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ –∑–∞–¥–∞—á–µ")
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª {file_info['filename']}")
                            else:
                                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç URL –¥–ª—è —Ñ–∞–π–ª–∞ {file_info['filename']}")
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_info['filename']}: {e}")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ñ–∞–π–ª–∞—Ö
                    if uploaded_files:
                        files_comment = f"üìé **–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ñ–∞–π–ª—ã –∏–∑ Telegram:**\n" + "\n".join([
                            f"‚Ä¢ {filename}" for filename in uploaded_files
                        ])
                    else:
                        files_comment = f"üìé **–§–∞–π–ª—ã –∏–∑ Telegram:**\n" + "\n".join([
                            f"‚Ä¢ {info['filename']} ({info['size']} –±–∞–π—Ç) - —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ" 
                            for info in files_info
                        ])
                    
                    try:
                        bitrix24_api.add_comment_to_task(task.bitrix24_task_id, files_comment)
                        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ –∫ –∑–∞–¥–∞—á–µ {task.bitrix24_task_id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Ñ–∞–π–ª–∞—Ö: {e}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
    
    async def download_file(self, context: ContextTypes.DEFAULT_TYPE, file_id: str, 
                           files_dir: str, filename: str) -> Optional[Dict[str, Any]]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram"""
        try:
            file = await context.bot.get_file(file_id)
            file_path = os.path.join(files_dir, filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
            await file.download_to_drive(file_path)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(file_path)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ Telegram
            bot_token = settings.telegram_bot_token
            telegram_file_url = f"https://api.telegram.org/file/bot{bot_token}/{file.file_path}"
            
            logger.info(f"–§–∞–π–ª {filename} —Å–∫–∞—á–∞–Ω –≤ {file_path}")
            logger.info(f"–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ Telegram: {telegram_file_url}")
            
            return {
                "filename": filename,
                "path": file_path,
                "size": file_size,
                "file_id": file_id,
                "telegram_file_url": telegram_file_url,
                "type": "file"  # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_id}: {e}")
            return None
    
    def setup_handlers(self, application: Application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–û–ú–ê–ù–î–´ –ò–ú–ï–Æ–¢ –í–´–°–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (group=-1)
        application.add_handler(CommandHandler("start", self.start_command), group=-1)
        application.add_handler(CommandHandler("help", self.help_command), group=-1)
        application.add_handler(CommandHandler("tasks", self.tasks_command), group=-1)

        application.add_handler(CommandHandler("my_stats", self.my_stats_command), group=-1)
        application.add_handler(CommandHandler("daily_report", self.daily_report_command), group=-1)
        application.add_handler(CommandHandler("sync", self.sync_command), group=-1)
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
        application.add_handler(CommandHandler("users", self.users_command), group=-1)
        application.add_handler(CommandHandler("add_admin", self.add_admin_command), group=-1)
        application.add_handler(CommandHandler("remove_admin", self.remove_admin_command), group=-1)
        application.add_handler(CommandHandler("my_role", self.my_role_command), group=-1)
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –≤ —á–∞—Ç–∞—Ö
        application.add_handler(CommandHandler("add_employee", self.add_employee_command), group=-1)
        application.add_handler(CommandHandler("chat_employees", self.chat_employees_command), group=-1)
        application.add_handler(CommandHandler("manage_employees", self.manage_employees_command), group=-1)
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º tgID
        application.add_handler(CommandHandler("link_telegram", self.link_telegram_command), group=-1)
        application.add_handler(CommandHandler("unlink_telegram", self.unlink_telegram_command), group=-1)
        application.add_handler(CommandHandler("show_links", self.show_links_command), group=-1)
        application.add_handler(CommandHandler("sync_bitrix", self.sync_bitrix_command), group=-1)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        application.add_handler(MessageHandler(
            filters.TEXT & (filters.ChatType.GROUP | filters.ChatType.SUPERGROUP) & filters.Regex(r'@\w+'), 
            self.handle_mention
        ), group=0)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
        application.add_handler(MessageHandler(
            (filters.PHOTO | filters.Document.ALL | filters.VIDEO | filters.AUDIO | filters.VOICE) & 
            (filters.ChatType.GROUP | filters.ChatType.SUPERGROUP), 
            self.handle_mention
        ), group=0)
        
        # –í–†–ï–ú–ï–ù–ù–û: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è —Ç–µ—Å—Ç–∞
        application.add_handler(MessageHandler(
            filters.TEXT & filters.ChatType.PRIVATE & filters.Regex(r'–∑–∞–¥–∞—á–∞|task'), 
            self.handle_mention
        ), group=1)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Telegram ID –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        application.add_handler(MessageHandler(
            filters.TEXT & filters.ChatType.PRIVATE & filters.Regex(r'^\d+$'),
            self.handle_employee_telegram_id_input
        ), group=2)
        

        
        # –í—Ä–µ–º–µ–Ω–Ω–æ: –æ—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        application.add_handler(MessageHandler(
            filters.TEXT,
            self.debug_all_messages
        ), group=10)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(
            self.handle_type_selection, 
            pattern="^type_"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        application.add_handler(CallbackQueryHandler(
            self.handle_project_selection,
            pattern="^(project_|all_my_tasks_)"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤
        application.add_handler(CallbackQueryHandler(
            self.handle_back_to_projects,
            pattern="^back_to_projects$"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        application.add_handler(CallbackQueryHandler(
            self.handle_employee_management,
            pattern="^(add_emp_project_|manage_emp_|add_bitrix_user_|remove_emp_|emp_page_)"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è Telegram ID
        application.add_handler(CallbackQueryHandler(
            self.handle_manual_telegram_link,
            pattern="^link_telegram_"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
        application.add_handler(CallbackQueryHandler(
            self.handle_back_to_manage_employees,
            pattern="^back_to_manage_employees$"
        ))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        from telegram.ext import ChatMemberHandler
        application.add_handler(ChatMemberHandler(
            self.handle_chat_member_update,
            ChatMemberHandler.CHAT_MEMBER
        ))
    
    async def post_init(self, application: Application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        bot_info = await application.bot.get_me()
        self.bot_username = bot_info.username
        logger.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @{self.bot_username}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ —Å–≤—è–∑–µ–π Telegram-Bitrix24
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ—à–∞ —Å–≤—è–∑–µ–π Telegram-Bitrix24...")
        telegram_bitrix_sync.load_cache()
        logger.info("–ö–µ—à —Å–≤—è–∑–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω.")


def create_bot_application() -> Application:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞"""
    application = Application.builder().token(settings.telegram_bot_token).build()
    
    support_bot = SupportBot()
    support_bot.setup_handlers(application)
    
    # –î–æ–±–∞–≤–ª—è–µ–º post_init
    application.job_queue.run_once(
        lambda context: support_bot.post_init(application), 
        when=1
    )
    
    return application
